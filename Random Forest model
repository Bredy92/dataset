# Clear working environment
rm(list = ls())

# Load packages------------------------------------
library(randomForest)
library(hydroGOF)
library(pracma)
library(magrittr)
library(dplyr)

# load dataset
db <- read.csv("data.csv", header = TRUE, sep = ";", dec = ".", 
               stringsAsFactors = FALSE)

# Data transformation
# TRENDS AND RESIDUALS IN TIME SERIES
residual <- db %>% select(starts_with("h")) %>% apply(2, detrend) %>% 
  data.frame()

trend <- db %>% select(starts_with("h")) - residual

# Select the WTH column to be predicted
for(col in 1:6){ 

  # To display the 'WTH' column that trains the model
  Sys.sleep(0.01)
  print(col)
  
  # Initialize table of statistical results and relative importance of input variables
  line <- 1 # Table line
  
  # Statistical results table
  result <- matrix(0, nrow = 3, ncol = 11)
  colnames(result)<- c("Hour", paste0(rep(c("Tr_", "Ts_"), each = 5), 
                                      c("RMSE", "r2", "a", "b", "NSE")))
  
  # Importance of input variables table
  ImpVar <- matrix(0, nrow = 3, ncol = 4)
  colnames(ImpVar) <- c("Hour", "wth", "P", "etp")
  
  # Time steps to be forecasted h = 1, 12, and 24 hours
  for(h in c(1, 12, 24)){ 
    
    # To display the forecast time step
    Sys.sleep(0.01)
    print(h)
    
    # Training subset : observation well
    train <- db %>% select(etp, P) %>% mutate(wth = residual[[col]])
    
    # Test subset for nearest neighbor observation well
    test <- db %>% select(etp, P) %>% mutate(wth = residual[[col + 1]])
    
    # Training subset for Random Forest 
    # Next step of output variable : WTH
    train <- train %>% mutate(!!paste0("wthT", h) := lead(wth, h, default = NA))
    
    # Next step of precipitation and, evapotranspiration ------
    for (i in h:1) {
      train <- train %>% mutate(!!paste0("PT", i) := lead(P, i, default = NA), 
                                !!paste0("etpT", i) := lead(etp, i, default = NA))
    } 
    
    # Previous time step of WTH ------
    for (j in 1:23) {
      train <- train %>%
        mutate(!!paste0("wthTm", j) := lag(wth, j, default = NA),
               !!paste0("PTm", j) := lag(P, j, default = NA),
               !!paste0("etpTm", j) := lag(etp, j, default = NA))
    }
    
    # Eliminate NA observations
    train <- train %>% slice(24:(nrow(train)-h))
    
    # Test subset for Random Forest
    # Next step of output variable : WTH
    test <- test %>% mutate(!!paste0("wthT", h) := lead(wth, h, default = NA))
    
    # Next step of precipitation and, evapotranspiration ------
    for (i in h:1) {
      test <- test %>% mutate(!!paste0("PT",i) := lead(P, i, default = NA), 
                              !!paste0("etpT",i) := lead(etp, i, default = NA))
    } 
    
    # Previous time step of WTH ------
    for (j in 1:23) {
      test <- test %>%
        mutate(!!paste0("wthTm", j) := lag(wth, j, default = NA),
               !!paste0("PTm", j) := lag(P, j, default = NA),
               !!paste0("etpTm", j) := lag(etp, j, default = NA))
    }
    
    # Eliminate NA observations
    test <- test %>% slice(24:(nrow(test)-h))
    
    rm(i, j) # Useless object
    
    # Model training
    set.seed(985)                                             
    
    Fit <- paste0("wthT", h, "~",paste(colnames(train)[-4], collapse = "+")) %>% 
      formula %>% randomForest(data = train,
                               ntree = 1000,
                               nodesize = 1,
                               importance = TRUE)
    
    # Model calibration for the observation well ----------
    Predict_c <- Fit %>% predict(newdata = train)
    
    df_c <- train %>% transmute(Observed =!!sym(paste0("wthT", h)),
                                Predicted = Predict_c) + trend %>% select(col) %>% 
      slice((24+h):nrow(trend)) %>% pull()
    
    # Model validation for the h2 observation well ----------
    Predict_t <- Fit %>% predict(newdata = test)
    
    df_t <- test %>% transmute(Observed =!!sym(paste0("wthT", h)),
                               Predicted = Predict_t) + trend %>% select(col+1) %>% 
      slice((24+h):nrow(trend)) %>% pull()
    # Statistical values of RMSE, R2, and NSE for the model calibration and validation
    stat_c <- as.data.frame(t(gof(df_c[[2]], df_c[[1]])))
    stat_t <- as.data.frame(t(gof(df_t[[2]], df_t[[1]])))
    
    # Statistical coefficients for model calibration
    result[line, 1] <- h   # The forecast time step
    result[line, 2] <- stat_c$RMSE
    result[line, 3] <- stat_c$R2
    result[line, 4] <- round(coefficients(lm(df_c[[2]]~df_c[[1]]))[2], 3)
    result[line, 5] <- round(coefficients(lm(df_c[[2]]~df_c[[1]]))[1], 3)
    result[line, 6] <- stat_c$NSE
    
    # Statistical coefficients for model validation
    result[line, 7] <- stat_t$RMSE
    result[line, 8] <- stat_t$R2
    result[line, 9] <- round(coefficients(lm(df_t[[2]]~df_t[[1]]))[2], 3)
    result[line, 10] <- round(coefficients(lm(df_t[[2]]~df_t[[1]]))[1], 3)
    result[line, 11] <- stat_t$NSE
    
    # Importance of input variables scaled to 100 ----------
    # The forecast time step
    ImpVar[line, 1] <- h
    # height of water table to water level in drains
    ImpVar[line, 2] <- 100*((Fit %>% importance)[ , 2] %>% t %>% data.frame %>% 
                              select(starts_with("wth")) %>% 
                              rowSums())/(Fit %>% importance)[ , 2] %>% sum()
    # Precipitation
    ImpVar[line, 3] <- 100*((Fit %>% importance)[ , 2] %>% t %>% data.frame %>% 
                              select(starts_with("P")) %>% 
                              rowSums())/(Fit %>% importance)[ , 2] %>% sum()
    
    # Evapotranspiration
    ImpVar[line, 4] <- 100*((Fit %>% importance)[ , 2] %>% t %>% data.frame %>% 
                              select(starts_with("etp")) %>% 
                              rowSums())/(Fit %>% importance)[ , 2] %>% sum()
    
    line <- line + 1
  }
  
   write.table(result, paste0("Stat_h", col, "-", col+1, ".txt"), 
              sep = "\t", row.names = FALSE)
  
   write.table(ImpVar, paste0("Importance_h", "column-", col, ".txt"), 
             sep = "\t", row.names = FALSE)
}

